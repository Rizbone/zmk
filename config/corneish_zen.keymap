

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


// ------- MAC -------------------

#define mCHAR 0
#define mNR 1

#define mLCHAR 2
#define mNRhard 3

#define mNAV 4
#define mNAV2 5

#define mPRG 6
#define mSPRG 7

#define mFUNC 8
#define mSFUNC 9

#define mSYM 10
#define mSSYM 11

#define mGUI 12

#define mAlter 13
#define mPNAV 14

#define mSShift 15


// ------- WIN -------------------


#define wCHAR 16
#define wNR 17

#define wLCHAR 18
#define wNRhard 19

#define wNAV 20
#define wNAV2 21

#define wPRG 22
#define wSPRG 23

#define wFUNC 24
#define wSFUNC 25

#define wSYM 26
#define wSSYM 27

#define wGUI 28

#define wAlter 29
#define wPNAV 30

#define wSShift 31




/ {
    chosen {
    	zmk,matrix_transform = &default_transform;
    };
};




/ {

    behaviors {

		// ------------------------- MAC ---------------------
	

        mdNr: tap_dance_mdNr {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_mdNr";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&to mNR>, <&sl mNR>;
        };


		mdLs: tap_dance_mdLs {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_mdLs";
            #binding-cells = <0>;
            tapping-term-ms = <1000>;
            bindings = <&sl mLCHAR>, <&to mLCHAR>;
        };
		mdRs: tap_dance_mdRs {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_mdRs";
            #binding-cells = <0>;
            tapping-term-ms = <1000>;
            bindings = <&sl mLCHAR>, <&to mLCHAR>;
        };



		// ------------------------- WiN ---------------------

		mdNrWin: tap_dance_mdNrWin {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_mdNrWin";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&to wNR>, <&sl wNR>;
        };

		mdLsWin: tap_dance_mdLsWin {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_mdLsWin";
            #binding-cells = <0>;
            tapping-term-ms = <1000>;
            bindings = <&sl wLCHAR>, <&to wLCHAR>;
        };
		mdRsWin: tap_dance_mdRsWin {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_mdRsWin";
            #binding-cells = <0>;
            tapping-term-ms = <1000>;
            bindings = <&sl wLCHAR>, <&to wLCHAR>;
        };

    };

	
    macros {

		// ------------------------- MAC ---------------------

        mSpaceReset: mSpaceReset {
            label = "mSpaceReset";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to mCHAR>
                , <&kp SPACE>
                ;
    	};
		mEnterReset: mEnterReset {
            label = "mEnterReset";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to mCHAR>
                , <&kp ENTER>
                ;
    	};
		mNavReset: mNavReset {
            label = "mNavReset";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to mCHAR>
                , <&macro_press &sl mNAV>
    			, <&macro_pause_for_release>
				, <&macro_release &sl mNAV>
                ;
    	};
		mPrgReset: mPrgReset {
            label = "mPrgReset";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to mCHAR>
                , <&macro_press &sl mPRG>
    			, <&macro_pause_for_release>
				, <&macro_release &sl mPRG>
                ;
    	};
		mFuncReset: mFuncReset {
            label = "mFuncReset";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to mCHAR>
                , <&macro_press &sl mFUNC>
    			, <&macro_pause_for_release>
				, <&macro_release &sl mFUNC>
                ;
    	};
		mSymReset: mSymReset {
            label = "mSymReset";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to mCHAR>
                , <&macro_press &sl mSYM>
    			, <&macro_pause_for_release>
				, <&macro_release &sl mSYM>
                ;
    	};

		mShiftReset: mShiftReset {
            label = "mShiftReset";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to mCHAR>
                , <&macro_press &sl mLCHAR>
    			, <&macro_pause_for_release>
				, <&macro_release &sl mLCHAR>
                ;
    	};


		mModSGuiReset: mModSGuiReset {
            label = "mModSGuiReset";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to mCHAR>
                , <&macro_press &sk LS(LGUI)>
    			, <&macro_pause_for_release>
				, <&macro_release &sk LS(LGUI)>
                ;
    	};


		mModAltReset: mModAltReset {
            label = "mModAltReset";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to mCHAR>
                , <&macro_press &sk LALT>
    			, <&macro_pause_for_release>
				, <&macro_release &sk LALT>
                ;
    	};

		mModCtlReset: mModCtlReset {
            label = "mModCtlReset";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to mCHAR>
                , <&macro_press &sk LCTL>
    			, <&macro_pause_for_release>
				, <&macro_release &sk LCTL>
                ;
    	};





		mFuncMarkLine: mFuncMarLine {
            label = "mFuncMarkLnie";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&kp LG(RIGHT)>
				, <&kp LS(LG(LEFT))>
                ;
    	};

		mFuncMarkWord: mFuncMarkWord {
            label = "mFuncMarkWord";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&kp LA(RIGHT)>
				, <&kp LS(LA(LEFT))>
                ;
    	};



		mAlterShift: mAlterShift {
            label = "mAlterShift";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to mCHAR>
                , <&macro_press &sl mAlter>
    			, <&macro_pause_for_release>
				, <&macro_release &sl mAlter>
                ;
    	};

		mPNAVShift: mPNAVShift {
            label = "mPNAVShift";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to mCHAR>
                , <&macro_press &sl mPNAV>
    			, <&macro_pause_for_release>
				, <&macro_release &sl mPNAV>
                ;
    	};

		mNavShift: mNavShift {
            label = "mNavShift";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to mCHAR>
                , <&macro_press &sl mNAV>
    			, <&macro_pause_for_release>
				, <&macro_release &sl mNAV>
				;
    	};

		mNrShift: mNrShift {
            label = "mNrShift";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&tog mNRhard>
				, <&macro_press &mo mSShift>
            	, <&macro_release &mo mSShift>
                ;
    	};




		// ------------------------- WiN ---------------------

        wSpaceReset: wSpaceReset {
            label = "wSpaceReset";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to wCHAR>
                , <&kp SPACE>
                ;
    	};
		wEnterReset: wEnterReset {
            label = "wEnterReset";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to wCHAR>
                , <&kp ENTER>
                ;
    	};
		wNavReset: wNavReset {
            label = "wNavReset";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to wCHAR>
                , <&macro_press &sl wNAV>
    			, <&macro_pause_for_release>
				, <&macro_release &sl wNAV>
                ;
    	};
		wPrgReset: wPrgReset {
            label = "wPrgReset";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to wCHAR>
                , <&macro_press &sl wPRG>
    			, <&macro_pause_for_release>
				, <&macro_release &sl wPRG>
                ;
    	};
		wFuncReset: wFuncReset {
            label = "wFuncReset";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to wCHAR>
                , <&macro_press &sl wFUNC>
    			, <&macro_pause_for_release>
				, <&macro_release &sl wFUNC>
                ;
    	};
		wSymReset: wSymReset {
            label = "wSymReset";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to wCHAR>
                , <&macro_press &sl wSYM>
    			, <&macro_pause_for_release>
				, <&macro_release &sl wSYM>
                ;
    	};

		wShiftReset: wShiftReset {
            label = "wShiftReset";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to wCHAR>
                , <&macro_press &sl wLCHAR>
    			, <&macro_pause_for_release>
				, <&macro_release &sl wLCHAR>
                ;
    	};



		wModSCtlReset: wModSCtlReset {
            label = "wModSCtlReset";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to wCHAR>
                , <&macro_press &sk LS(LCTL)>
    			, <&macro_pause_for_release>
				, <&macro_release &sk LS(LCTL)>
                ;
    	};


		wModAltReset: wModAltReset {
            label = "wModAltReset";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to wCHAR>
                , <&macro_press &sk LALT>
    			, <&macro_pause_for_release>
				, <&macro_release &sk LALT>
                ;
    	};

		wModGuiReset: wModGuiReset {
            label = "wModGuiReset";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to wCHAR>
                , <&macro_press &sk LGUI>
    			, <&macro_pause_for_release>
				, <&macro_release &sk LGUI>
                ;
    	};



		wFuncMarkLine: wFuncMarLine {
            label = "wFuncMarkLnie";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&kp END>
				, <&kp LS(HOME)>
                ;
    	};

		wFuncMarkWord: wFuncMarkWord {
            label = "wFuncMarkWord";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&kp LC(RIGHT)>
				, <&kp LC(LS(LEFT))>
                ;
    	};



		wAlterShift: wAlterShift {
            label = "wAlterShift";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to wCHAR>
                , <&macro_press &sl wAlter>
    			, <&macro_pause_for_release>
				, <&macro_release &sl wAlter>
                ;
    	};

		wPNAVShift: wPNAVShift {
            label = "wPNAVShift";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to wCHAR>
                , <&macro_press &sl wPNAV>
    			, <&macro_pause_for_release>
				, <&macro_release &sl wPNAV>
                ;
    	};

		wNavShift: wNavShift {
            label = "wNavShift";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to wCHAR>
                , <&macro_press &sl wNAV>
    			, <&macro_pause_for_release>
				, <&macro_release &sl wNAV>
				;
    	};

		wNrShift: wNrShift {
            label = "wNrShift";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&tog wNRhard>
				, <&macro_press &mo wSShift>
            	, <&macro_release &mo wSShift>
                ;
    	};

	};





	keymap
	{	
		compatible = "zmk,keymap";



		// ----------------------------------------------------------------------------------------------|
		// 											MAC			
		// ----------------------------------------------------------------------------------------------|


		// -----------------------------------------------------|
		// Layer 0 - mChar = 	  Buchstaben					|
		// -----------------------------------------------------|
	
		mac_buchstaben
		{
			label = "MAC";

			bindings = <

				// ----------------------------------------

				&kp ESC
				&kp J 
				&kp D	 
				&kp U
				&kp A
				&kp X

				&kp P
				&kp H
				&kp L
				&kp M
				&kp W
				&kp BSPC

				// ----------------------------------------
	
				&sl mSShift
				&kp C
				&kp T
				&kp I
				&kp E
				&kp O

				&kp B
				&kp N
				&kp R
				&kp S
				&kp G
				&kp RET

				// ----------------------------------------
	
				&mdLs
				&kp F
				&kp V
				&kp MINUS
				&kp Y
				&kp Q

				&kp Z
				&kp SEMI
				&kp LBKT
				&kp SQT
				&kp K
				&mdRs

				// ----------------------------------------

				&sl mSYM
				&kp SPACE
				&sl mFUNC
				&sl mPRG
				&sl mNAV
				&mdNr

				// ----------------------------------------
			>;
		};



		// -----------------------------------------------------|
		// Layer 1 - mNR = 	  Zahlen 							|
		// -----------------------------------------------------|

		mac_zahlen
		{
			label = "MAC";

			bindings = <

				// ----------------------------------------

				&kp ESC	
				&kp LS(LA(N7))			// backlslash
				&kp NUBS				// Spitze
				&kp LS(NUBS)			// Spitze
				&kp GRAVE				// ^
				&kp X
				
				&kp LS(NUHS)			// '
				&kp LS(DOT)				// :
				&kp LS(COMMA)			// ;
				&kp M
				&kp LS(SLASH)			// _
				&kp BACKSPACE

				// ----------------------------------------

				&sl mSShift
				&kp N1				
				&kp N2				
				&kp N3				
				&kp N4					
				&kp N5		

				&kp N6				
				&kp N7				
				&kp N8			
				&kp N9				
				&kp N0				
				&mEnterReset 

				// ----------------------------------------

				&mShiftReset
				&kp LS(N7)				// /
				&kp LS(RBKT)			// *				
				&kp LS(N5)				// %
				&kp LA(E)				// €
				&kp GRAVE				// ^

				&kp LS(N0)				// =
				&kp DOT					// .
				&kp COMMA				// ,
				&kp RBKT  				// +
				&kp SLASH 				// -
				&mShiftReset

				// ----------------------------------------
		
				&mSymReset
				&mSpaceReset 
				&mFuncReset
				&mPrgReset
				&mNavReset
				&none
			>;		
		};



		// -----------------------------------------------------|
		// Layer 2 - mLCHAR = 	  Buchstaben Lock				|
		// -----------------------------------------------------|
	
		mac_lchar
		{
			label = "MAC";

			bindings = <

				// ----------------------------------------

				&kp ESC
				&kp LS(J) 
				&kp LS(D)	 
				&kp LS(U)
				&kp LS(A)
				&kp LS(X)

				&kp LS(P)
				&kp LS(H)
				&kp LS(L)
				&kp LS(M)
				&kp LS(W)
				&kp LS(BSPC)

				// ----------------------------------------
	
				&sl mSShift
				&kp LS(C)
				&kp LS(T)
				&kp LS(I)
				&kp LS(E)
				&kp LS(O)
			
				&kp LS(B)
				&kp LS(N)
				&kp LS(R)
				&kp LS(S)
				&kp LS(G)
				&mEnterReset

				// ----------------------------------------

				&mShiftReset
				&kp LS(F)
				&kp LS(V)
				&kp LS(MINUS)
				&kp LS(Y)
				&kp LS(Q)

				&kp LS(Z)
				&kp LS(SEMI)
				&kp LS(LBKT)
				&kp LS(SQT)
				&kp LS(K)
				&mShiftReset						

				// ----------------------------------------

				&sl mSYM
				&mSpaceReset 
				&mFuncReset
				&mPrgReset
				&mNavReset
				&mdNr

				// ----------------------------------------
			>;
		};



		// -----------------------------------------------------|
		// Layer 3 - mNRhard = 	  Zahlen Hard Lock				|
		// -----------------------------------------------------|

		mac_zahlenhard
		{
			label = "MAC";

			bindings = <

				// ----------------------------------------

				&kp ESC	
				&kp LS(LA(N7))			// backlslash
				&kp NUBS				// Spitze
				&kp LS(NUBS)			// Spitze
				&kp GRAVE				// ^
				&kp X
				
				&kp LS(NUHS)			// '
				&kp LS(DOT)				// :
				&kp LS(COMMA)			// ;
				&kp M
				&kp LS(SLASH)			// _
				&kp BSPC

				// ----------------------------------------

				&sl mSShift
				&kp N1				
				&kp N2				
				&kp N3				
				&kp N4					
				&kp N5		

				&kp N6				
				&kp N7				
				&kp N8				
				&kp N9				
				&kp N0				
				&kp ENTER 

				// ----------------------------------------

				&mShiftReset
				&kp LS(N7)				// /
				&kp LS(RBKT)			// *				
				&kp LS(N5)				// %
				&kp LA(E)				// €
				&kp GRAVE				// ^

				&kp LS(N0)				// =
				&kp DOT					// .
				&kp COMMA				// ,
				&kp RBKT  				// +
				&kp SLASH 				// -
				&mShiftReset

				// ----------------------------------------
		
				&sl mSYM
				&kp SPACE
				&sl mFUNC
				&sl mPRG
				&sl mNAV
				&to mCHAR
			>;		
		};





		// -----------------------------------------------------|
		// Layer = 4 - mNAV - Navigation						|
		// -----------------------------------------------------|

		mac_navigation
		{		
			label = "MAC";

			bindings = <

				// ----------------------------------------

				&kp ESC						// -
				&kp LG(UP)					// @Home Sprung
				&kp LS(TAB)
				&kp UP						// @Up
				&kp TAB
				&kp LG(A)				 	// 

				&kp LS(F1)				 	// 
				&kp LS(F2)				 	// 
				&kp PG_UP
				&kp LS(F3)				 	// 
				&kp LGUI
				&kp BSPC					// -

				// ----------------------------------------

				&sl mSShift					// -
				&kp LG(DOWN)				// @End Sprung
				&kp LEFT 					// @Left
				&kp DOWN					// @Down
				&kp RIGHT 					// @Right
				&mFuncMarkLine

				&kp LS(F4)				 	// 
				&kp LS(F5)				 	// 
				&kp PG_DN
				&kp LS(F6)				 	// 
				&kp LCTL
				&kp ENTER					// -
				
				// ----------------------------------------

				&mdLs
				&kp LG(LEFT)				// @Home 
				&kp LA(LEFT)				// @Wort Sprung
				&kp LA(RIGHT)				// @Wort Sprung
				&kp LG(RIGHT)				// @End  
				&mFuncMarkWord

				&kp LS(F7)				 	// 
				&kp LS(F8)				 	// 
				&kp LS(F9)				 	// 
				&kp LS(F10)				 	// 
				&kp LS(F11)				 	// 
				&mdRs

				// ----------------------------------------

				&sl mSYM
				&kp SPACE				
				&sl mFUNC
				&mo mCHAR
				&sl mNAV2					// deep
				&to mCHAR

				// ----------------------------------------							
			>;
		};

		// ---------------------------------------------------------|
		// Layer = 5 - mNAV2 - Navigation deep						|
		// ---------------------------------------------------------|		

		mac_navigation2
		{		
			label = "MAC";

			bindings = <

				// ----------------------------------------

				&kp LS(ESC)	
				&kp LG(LS(UP))
				&kp LS(TAB)
				&kp LS(UP)					
				&kp TAB
				&kp LG(A)

				&kp LA(F1) 
				&kp LA(F2) 
				&kp LC(PG_UP)
				&kp LA(F4) 
				&kp LGUI
				&kp DEL

				// ----------------------------------------

				&sl mSShift					// -					
				&kp LG(LS(DOWN))				
				&kp LS(LEFT)		
				&kp LS(DOWN)		
				&kp LS(RIGHT)		
				&mFuncMarkLine

				&kp LA(F6) 
				&kp LA(F7) 
				&kp LC(PG_DN)
				&kp LA(F9) 
				&kp LCTL
				&kp ENTER

				// ----------------------------------------
	
				&mdLs	
				&kp LG(LS(LEFT))			// @Home 
				&kp LA(LS(LEFT))			// @Wort Sprung
				&kp LA(LS(RIGHT))			// @Wort Sprung
				&kp LG(LS(RIGHT))			// @End  
				&mFuncMarkWord

				&kp LA(F11) 
				&kp LA(F12) 
				&kp LA(F13) 
				&kp LA(F14) 
				&kp LA(F15) 
				&mdRs

				// ----------------------------------------

				&sl mSYM
				&kp SPACE				
				&sl mFUNC
				&mo mCHAR					// 
				&mNavShift						// 
				&to mCHAR

				// ----------------------------------------
			>;
		};




		// -----------------------------------------------------|
		// Layer 6 - mPRG =	Programme							|
		// -----------------------------------------------------|


		mac_programme
		{
			label = "MAC";

			bindings = <

				// ----------------------------------------

				&kp LG(H)
				&kp LG(LS(N1))				// 11
				&kp LG(LS(N2))				// 12
				&kp LG(LS(N3))				// 13
				&kp LG(LS(N4))				// 14
				&kp LG(LS(N5))				// 15

				&kp LG(LS(N6))				// 16
				&kp LG(LS(N7))				// 17
				&kp LG(LS(N8))				// 18
				&kp LG(LS(N9))				// 19
				&kp LG(LS(N0))				// 20
				&kp LG(Q)

				// ----------------------------------------

				&kp LG(TAB)
				&kp LG(LA(N1))				// 1
				&kp LG(LA(N2))				// 2
				&kp LG(LA(N3))				// 3
				&kp LG(LA(N4))				// 4
				&kp LG(LA(N5))				// 5

				&kp LG(LA(N6))				// 6
				&kp LG(LA(N7))				// 7
				&kp LG(LA(N8))				// 8
				&kp LG(LA(N9))				// 9
				&kp LG(LA(N0))				// 0
				&kp LG(LS(F4))

				// ----------------------------------------

				&kp LG(LS(F5))
				&kp LC(LA(N1))			// 21 			
				&kp LC(LA(N2))			// 22
				&kp LC(LA(N3))			// 23
				&kp LC(LA(N4))			// 24
				&kp LC(LA(N5))			// 25
	
				&kp LC(LA(N6))			// 26
				&kp LC(LA(N7))			// 27
				&kp LC(LA(N8))			// 28
				&kp LC(LA(N9))			// 29
				&kp LC(LA(N0))			// 30
				&kp LG(LS(F6))
		
				// ----------------------------------------

				&none
				&none
				&none
				&sl mSPRG					// deep						
				&mNavShift
				&none

				// ----------------------------------------

			>;
		};
		


		// -----------------------------------------------------|
		// Layer 7 - mSPRG =	Spezial Prgramme				|
		// -----------------------------------------------------|


		mac_sprogramme
		{

			label = "MAC";

			bindings = <

				// ----------------------------------------

				&kp LG(LS(F7))			// #OPEN
				&kp LA(F1)				//
				&kp LA(F2)				//
				&kp LA(F3)				//
				&kp LA(F4)				//
				&kp LA(F5)				//

				&kp LG(F1)				//
				&kp LG(F2)				//
				&kp LG(F3)				//
				&kp LG(F4)				//
				&kp LG(F5)				//
				&kp LG(LS(F8))			// #OPEN
		
				// ----------------------------------------

				&kp LG(LS(F9))			// #OPEN
				&kp LA(F6)				//
				&kp LA(F7)				//
				&kp LA(F8)				//
				&kp LA(F9)				//
				&kp LA(F9)				//

				&kp LC(F6)				//
				&kp LC(F7)				//
				&kp LC(F8)				//
				&kp LC(F9)				//
				&kp LC(F10)				//
				&kp LG(LS(F10))			// #OPEN

				// ----------------------------------------

				&kp LG(LS(F11))			// #OPEN			
				&kp LA(F11)				//
				&kp LA(F12)				//
				&kp LA(F13)				//
				&kp LA(F14)				//
				&kp LA(F15)				//

				&kp LG(F11)				//
				&kp LG(F12)				//
				&kp LG(F13)				//
				&kp LG(F14)				//
				&kp LG(F15)				//
				&kp LS(LG(F12))			// #OPEN
		
				// ----------------------------------------

				&none						//
				&none						//
				&none
				&trans						// 
				&mNavShift
				&none						// 

				// ----------------------------------------

			>;
		};
					


		// -----------------------------------------------------|
		// Layer 8 - mFUNC =	Funktionen						|
		// -----------------------------------------------------|

		mac_function
		{
			label = "MAC";

			bindings = <

				// ----------------------------------------
	
				&kp LG(LS(F13))				
				&kp LG(LA(J))	
				&kp LG(LA(D))	
				&kp LG(LA(U))	
				&kp LG(LA(A))	
				&kp LG(LA(X))	

				&kp LG(LA(P))	
				&kp LG(LA(H))	
				&kp LG(LA(L))	
				&kp LG(LA(M))	
				&kp LG(LA(W))	
				&kp LG(W)				
				
				// ----------------------------------------

				&kp LG(LS(F14))		
				&kp LG(A)
				&kp LG(LA(T))	
				&kp LG(LA(I))	
				&kp LG(C)			
				&kp LG(X)

				&kp LG(LA(V))
				&kp LG(V)
				&kp LG(LA(R))	
				&kp LG(LA(S))	
				&kp LG(LA(G))	
				&kp ENTER

				// ----------------------------------------

				&kp LS(LG(F15))
				&kp LG(S)
				&kp LG(Y)
				&kp LG(LS(Y))
				&kp LG(O)
				&kp LG(LA(Q))	

				&kp LG(P)	
				&kp LG(LA(SEMI))	
				&kp LG(LA(LBKT))	
				&kp LG(LA(SQT))	
				&kp LG(F)	
				&kp LG(T)
				
				// ----------------------------------------

				&mModAltReset				//
				&sl mGUI					//
				&sl mSFUNC					// deep
				&none
				&mNavShift					//
				&none						//

				// ----------------------------------------
			>;
		};



		// -----------------------------------------------------|
		// Layer 9 - mSFUNC =	Spezial Funktionen				|
		// -----------------------------------------------------|

		mac_specialfunction
		{
			label = "MAC";

			bindings = <

			// ----------------------------------------
	
				&kp LG(LS(F16))			
				&kp LS(LA(LC(J)))			// #OPEN
				&kp LS(LA(LC(D)))			// #OPEN
				&kp LS(LA(LC(U)))			// #OPEN
				&kp LS(LA(LC(A)))			// #OPEN
				&kp LS(LA(LC(X)))			// #OPEN

				&kp LS(LA(LC(P)))			// #OPEN
				&kp LS(LA(LC(H)))			// #OPEN
				&kp LS(LA(LC(L)))			// #OPEN
				&kp LS(LA(LC(M)))			// #OPEN
				&kp LS(LA(LC(W)))			// #OPEN
				&kp LS(LG(W))
				
				// ----------------------------------------

				&kp LG(LS(F17))		
				&kp LS(LA(LC(C)))			// #OPEN
				&kp LS(LA(LC(T)))			// #OPEN
				&kp LS(LA(LC(I)))			// #OPEN
				&kp LS(LA(LC(E)))			// #OPEN
				&kp LS(LA(LC(O)))			// #OPEN

				&kp LS(LA(LC(B)))			// #OPEN
				&kp LS(LA(LC(N)))			// #OPEN
				&kp LS(LA(LC(R)))			// #OPEN
				&kp LS(LA(LC(S)))			// #OPEN
				&kp LS(LA(LC(G)))			// #OPEN
				&kp LG(ENTER)	

				// ----------------------------------------

				&kp LG(LS(F18))		
				&kp LS(LA(LC(F)))			// #OPEN
				&kp LS(LA(LC(V)))			// #OPEN
				&kp LS(LA(LC(MINUS)))		// #OPEN
				&kp LS(LA(LC(Y)))			// #OPEN
				&kp LS(LA(LC(Q)))			// #OPEN

				&kp LS(LA(LC(Z)))			// #OPEN
				&kp LS(LA(LC(SEMI)))		// #OPEN
				&kp LS(LA(LC(LBKT)))		// #OPEN
				&kp LS(LA(LC(SQT)))			// #OPEN
				&kp LS(LA(LC(K)))			// #OPEN
				&kp LS(LG(T))
				
				// ----------------------------------------

				&mModCtlReset
				&mModSGuiReset
				&trans						// 
				&none
				&mNavShift						//
				&none						//

				// ----------------------------------------       
			>;
		};



		// -----------------------------------------------------|
		// Layer 10 - mSYM =	Symoble							|
		// -----------------------------------------------------|

		mac_symbole
		{
			label = "MAC";

			bindings = <

				// ----------------------------------------
				
				&kp ESC
				&kp LS(LA(N7))			// backlslash
				&kp NUBS				// Spitze
				&kp LS(NUBS)			// Spitze
				&kp GRAVE				// ^
				&kp X
				
				&kp LS(NUHS)			// '
				&kp LS(DOT)				// :
				&kp LS(COMMA)			// ;
				&kp M
				&kp LS(SLASH)			// _
				&kp BACKSPACE			// Backspace

				// ----------------------------------------

				&kp LGUI
				&kp LA(L)				// @
				&kp LA(N7)				// grader strich
				&kp LS(N6)				// &
				&kp NUHS				// #
				&kp LS(N3)				// §

				&kp LS(N2)				// "
				&kp LS(N1)				// !
				&kp LS(N8)				// Runde
				&kp LS(N9)				// Runde
				&kp LS(MINUS)			// ?
				&kp ENTER

				// ----------------------------------------

				&kp LSHIFT				//
				&kp LS(N7)				// /
				&kp LS(RBKT)			// *				
				&kp LS(N5)				// %
				&kp LA(E)				// €
				&kp GRAVE				// ^

				&kp LS(N0)				// =
				&kp DOT					// .
				&kp COMMA				// ,
				&kp RBKT  				// +
				&kp SLASH 				// -
				&kp LG(LC(SPACE))   	// @Sonderzeichen
		
				// ----------------------------------------

				&sl mSSYM				// deep
				&none		 			//
				&none					// 
				&none					//
				&mNavShift				//
				&none					//

				// ----------------------------------------
			>;
		};


		// -----------------------------------------------------|
		// Layer 11 - mSSYM =	Special Symbole					|
		// -----------------------------------------------------|

		mac_specialsonderzeichen
		{
			label = "MAC";

			bindings = <

				// ----------------------------------------

				&kp ESC
				&trans					//
				&trans 					// 
				&trans					//
				&trans					//
				&trans					//

				&trans					//
				&trans
				&trans					//
				&kp RA(M)				// 
				&trans					//
				&kp BACKSPACE			// 

				// ----------------------------------------

				&kp LCTL
				&trans					//
				&kp LS(GRAVE)			// Grad
				&trans					//
				&trans					//
				&trans					//

				&trans					//
				&trans					//
				&kp LA(N5)				// Eckige
				&kp LA(N6)				// Eckige
				&trans					//
				&kp ENTER

				// ----------------------------------------

				&kp LALT
				&kp LS(LA(N7))			// 
				&trans
				&trans
				&kp LS(N4) 				// $
				&trans					//

				&kp LA(N)				// ~
				&trans
				&kp LA(N8)				// Geschweift
				&kp LA(N9)				// Geschweift
				&kp LS(SLASH)			// _
				&kp LG(LC(SPACE))   	// @Sonderzeichen

				// ----------------------------------------

				&trans					//
				&none
				&none					// 
				&none					//
				&mNavShift				// 
				&none					//

				// ----------------------------------------
			>;
		};	




		// -----------------------------------------------------|
		// Layer 12 - mGUI =	GUI								|
		// -----------------------------------------------------|

		mac_gui
		{
			label = "MAC";

			bindings = <

				// ----------------------------------------

				&kp LG(ESC)					// 
				&kp LG(J)					//
				&kp LG(D)					//
				&kp LG(U)					//
				&kp LG(A)					//
				&kp LG(X)					//

				&kp LG(P)					//
				&kp LG(H)					//
				&kp LG(L) 					//
				&kp LG(M)					//
				&kp LG(W) 					//
				&kp LG(BACKSPACE)			//

				// ----------------------------------------
		
				&kp LG(DEL)					//
				&kp LG(C)					//
				&kp LG(T)					//
				&kp LG(I)					//
				&kp LG(E)					//
				&kp LG(O)					//

				&kp LG(B)					//
				&kp LG(N)					//
				&kp LG(R)					//
				&kp LG(S)					//
				&kp LG(G)					//
				&kp LG(ENTER)				// 

				// ----------------------------------------

				&kp LSHIFT
				&kp LG(F)					//
				&kp LG(V)					//
				&kp LG(MINUS)				//
				&kp LG(Y)					//
				&kp LG(Q)					//

				&kp LG(Z)					//
				&kp LG(SEMICOLON)			//
				&kp LG(LEFT_BRACKET)		//
				&kp LG(SINGLE_QUOTE)		//
				&kp LG(K) 					//
				&kp LSHIFT

				// ----------------------------------------
		
				&none						//
				&trans
				&none						// 
				&none						//
				&mNavShift						//
				&none						// 

				// ----------------------------------------
			>;
		};




		// -----------------------------------------------------|
		// Layer 16 - mAlter =	Alterantive						|
		// -----------------------------------------------------|

		mac_mAlter
		{
			label = "MAC";

			bindings = <

				// ----------------------------------------

				&none
				&kp F1
				&kp F2
				&kp F3
				&kp F4
				&kp F5

				&kp F6
				&kp F7
				&kp F8
				&kp F9
				&kp F10
				&none

				// ----------------------------------------
		
				&none
				&kp LG(N1)					// 11
				&kp LG(N2)					// 12
				&kp LG(N3)					// 13
				&kp LG(N4)					// 14
				&kp LG(N5)					// 15

				&kp LG(N6)					// 16
				&kp LG(N7)					// 17
				&kp LG(N8)					// 18
				&kp LG(N9)					// 19
				&kp LG(N0)					// 20
				&none

				// ----------------------------------------

				&none
				&kp F11
				&kp F12
				&kp F13
				&kp F14
				&kp F15

				&kp F16
				&kp F17
				&kp F18
				&kp F19
				&kp F20
				&none

				// ----------------------------------------
		
				&none						//
				&trans
				&none						// 
				&none						//
				&mNavShift						//
				&none						// 

				// ----------------------------------------
			>;
		};






		// -----------------------------------------------------|
		// Layer 17 - mPNAV =	Programm NAV					|
		// -----------------------------------------------------|

		mac_pnav
		{
			label = "MAC";

			bindings = <

				// ----------------------------------------

				&kp LG(LA(F10))				// 
				&none						//
				&kp LG(LA(F1))				// 
				&kp LG(LA(UP))				// 
				&kp LG(LA(F3))				//
				&none						// 

				&none						//
				&none						// 
				&none						//
				&none						// 
				&none						// 
				&kp BACKSPACE				//

				// ----------------------------------------
		
				&none						//
				&none						//
				&kp LG(LA(LEFT))			// 
				&kp LG(LA(DOWN))			// 
				&kp LG(LA(RIGHT))			// 
				&none						// 

				&none						//
				&none						// 
				&none						//
				&none						// 
				&none						// 
				&none						//

				// ----------------------------------------

				&none						//
				&none						//
				&none						// 
				&none						//
				&none						// 
				&none						// 

				&none						//
				&none						// 
				&none						//
				&none						// 
				&none						// 
				&none						//

				// ----------------------------------------
		
				&none						//
				&none
				&none						// 
				&none						//
				&mNavShift
				&none						// 

				// ----------------------------------------
			>;
		};





		// -----------------------------------------------------|
		// Layer 19 - mSideShift =	Side Shift					|
		// -----------------------------------------------------|

		mac_mSShift
		{
			label = "MAC";

			bindings = <

				// ----------------------------------------

				&kp ESC						// 
				&none
				&none
				&none
				&none
				&none

				&kp LC(LA(LG(P))) 					
				&kp LC(LA(LG(H)))					
				&kp LC(LA(LG(L)))			
				&kp LC(LA(LG(M)))		
				&kp LC(LA(LG(W)))	
				&kp BACKSPACE				//

				// ----------------------------------------
		
				&trans
				&none	
				&none
				&none
				&to mCHAR					//
				&to wCHAR

				&kp LC(LA(LG(B))) 					
				&kp LC(LA(LG(N)))					
				&kp LC(LA(LG(R)))			
				&kp LC(LA(LG(S)))		
				&kp LC(LA(LG(G)))	
				&kp LA(ENTER)				// 

				// ----------------------------------------

				&to mCHAR
				&none
				&none
				&none
				&none
				&none

				&kp LC(LA(LG(Z)))					//
				&kp LC(LA(LG(SEMICOLON)))			//
				&kp LC(LA(LG(LEFT_BRACKET)))		//
				&kp LC(LA(LG(SINGLE_QUOTE)))		//
				&kp LC(LA(LG(K))) 					//
				&to mCHAR

				// ----------------------------------------
		
				&none
				&kp LG(SPACE)
				&mAlterShift				// 
				&mPNAVShift					//
				&mNavShift					//
				&to mNRhard

				// ----------------------------------------
			>;
		};






		// ----------------------------------------------------------------------------------------------|
		// 											WIN			
		// ----------------------------------------------------------------------------------------------|



		// -----------------------------------------------------|
		// Layer 0 - mChar = 	  Buchstaben					|
		// -----------------------------------------------------|
	
		win_buchstaben
		{
			label = "win";

			bindings = <

				// ----------------------------------------

				&kp ESC
				&kp J 
				&kp D	 
				&kp U
				&kp A
				&kp X

				&kp P
				&kp H
				&kp L
				&kp M
				&kp W
				&kp BSPC

				// ----------------------------------------
	
				&sl wSShift
				&kp C
				&kp T
				&kp I
				&kp E
				&kp O

				&kp B
				&kp N
				&kp R
				&kp S
				&kp G
				&kp RET

				// ----------------------------------------
	
				&mdLsWin
				&kp F
				&kp V
				&kp MINUS
				&kp Y
				&kp Q

				&kp Z
				&kp SEMI
				&kp LBKT
				&kp SQT
				&kp K
				&mdRsWin

				// ----------------------------------------

				&sl wSYM
				&kp SPACE
				&sl wFUNC
				&sl wPRG
				&sl wNAV
				&mdNrWin

				// ----------------------------------------
			>;
		};



		// -----------------------------------------------------|
		// Layer 1 - mNR = 	  Zahlen 							|
		// -----------------------------------------------------|

		win_zahlen
		{
			label = "win";

			bindings = <

				// ----------------------------------------

				&kp ESC	
				&kp LS(LA(N7))			// backlslash
				&kp NUBS				// Spitze
				&kp LS(NUBS)			// Spitze
				&kp GRAVE				// ^
				&kp X
				
				&kp LS(NUHS)			// '
				&kp LS(DOT)				// :
				&kp LS(COMMA)			// ;
				&kp M
				&kp LS(SLASH)			// _
				&kp BACKSPACE

				// ----------------------------------------

				&sl wSShift
				&kp N1				
				&kp N2				
				&kp N3				
				&kp N4					
				&kp N5		

				&kp N6				
				&kp N7				
				&kp N8			
				&kp N9				
				&kp N0				
				&wEnterReset 

				// ----------------------------------------

				&wShiftReset
				&kp LS(N7)				// /
				&kp LS(RBKT)			// *				
				&kp LS(N5)				// %
				&kp LA(E)				// €
				&kp GRAVE				// ^

				&kp LS(N0)				// =
				&kp DOT					// .
				&kp COMMA				// ,
				&kp RBKT  				// +
				&kp SLASH 				// -
				&wShiftReset

				// ----------------------------------------
		
				&wSymReset
				&wSpaceReset 
				&wFuncReset
				&wPrgReset
				&wNavReset
				&none
			>;		
		};



		// -----------------------------------------------------|
		// Layer 2 - mLCHAR = 	  Buchstaben Lock				|
		// -----------------------------------------------------|
	
		win_lchar
		{
			label = "win";

			bindings = <

				// ----------------------------------------

				&kp ESC
				&kp LS(J) 
				&kp LS(D)	 
				&kp LS(U)
				&kp LS(A)
				&kp LS(X)

				&kp LS(P)
				&kp LS(H)
				&kp LS(L)
				&kp LS(M)
				&kp LS(W)
				&kp LS(BSPC)

				// ----------------------------------------
	
				&sl wSShift
				&kp LS(C)
				&kp LS(T)
				&kp LS(I)
				&kp LS(E)
				&kp LS(O)
			
				&kp LS(B)
				&kp LS(N)
				&kp LS(R)
				&kp LS(S)
				&kp LS(G)
				&wEnterReset

				// ----------------------------------------

				&wShiftReset
				&kp LS(F)
				&kp LS(V)
				&kp LS(MINUS)
				&kp LS(Y)
				&kp LS(Q)

				&kp LS(Z)
				&kp LS(SEMI)
				&kp LS(LBKT)
				&kp LS(SQT)
				&kp LS(K)
				&wShiftReset						

				// ----------------------------------------

				&sl mSYM
				&wSpaceReset 
				&wFuncReset
				&wPrgReset
				&wNavReset
				&mdNrWin

				// ----------------------------------------
			>;
		};



		// -----------------------------------------------------|
		// Layer 3 - mNRhard = 	  Zahlen Hard Lock				|
		// -----------------------------------------------------|

		win_zahlenhard
		{
			label = "win";

			bindings = <

				// ----------------------------------------

				&kp ESC	
				&kp LS(LA(N7))			// backlslash
				&kp NUBS				// Spitze
				&kp LS(NUBS)			// Spitze
				&kp GRAVE				// ^
				&kp X
				
				&kp LS(NUHS)			// '
				&kp LS(DOT)				// :
				&kp LS(COMMA)			// ;
				&kp M
				&kp LS(SLASH)			// _
				&kp BSPC

				// ----------------------------------------

				&sl wSShift
				&kp N1				
				&kp N2				
				&kp N3				
				&kp N4					
				&kp N5		

				&kp N6				
				&kp N7				
				&kp N8				
				&kp N9				
				&kp N0				
				&kp ENTER 

				// ----------------------------------------

				&wShiftReset
				&kp LS(N7)				// /
				&kp LS(RBKT)			// *				
				&kp LS(N5)				// %
				&kp LA(E)				// €
				&kp GRAVE				// ^

				&kp LS(N0)				// =
				&kp DOT					// .
				&kp COMMA				// ,
				&kp RBKT  				// +
				&kp SLASH 				// -
				&wShiftReset

				// ----------------------------------------
		
				&sl wSYM
				&kp SPACE
				&sl wFUNC
				&sl wPRG
				&sl wNAV
				&to wCHAR
			>;		
		};





		// -----------------------------------------------------|
		// Layer = 4 - mNAV - Navigation						|
		// -----------------------------------------------------|

		win_navigation
		{		
			label = "win";

			bindings = <

				// ----------------------------------------

				&kp ESC						// -
				&kp LC(HOME)				// @Home Sprung
				&kp LS(TAB)
				&kp UP						// @Up
				&kp TAB
				&kp LC(A)				 	// 

				&kp LS(F1)				 	// 
				&kp LC(KP_PLUS)				 	// 
				&kp PG_UP
				&kp LC(KP_MINUS)				 	// 
				&kp LALT
				&kp BSPC					// -

				// ----------------------------------------

				&sl wSShift					// -
				&kp LC(END)					// @End Sprung
				&kp LEFT 					// @Left
				&kp DOWN					// @Down
				&kp RIGHT 					// @Right
				&wFuncMarkLine

				&kp LS(F4)				 	// 
				&kp LS(LC(TAB))			 	// 
				&kp PG_DN
				&kp LC(TAB)				 	// 
				&kp LCTL
				&kp ENTER					// -
				
				// ----------------------------------------

				&mdLsWin
				&kp HOME				// @Home 
				&kp LC(LEFT)				// @Wort Sprung
				&kp LC(RIGHT)				// @Wort Sprung
				&kp END
				&wFuncMarkWord

				&kp LS(F7)				 	// 
				&kp LS(F8)				 	// 
				&kp LS(F9)				 	// 
				&kp LS(F10)				 	// 
				&kp LS(F11)				 	// 
				&mdRsWin

				// ----------------------------------------

				&sl wSYM
				&kp SPACE				
				&sl wFUNC
				&mo wCHAR
				&sl wNAV2					// deep
				&to wCHAR

				// ----------------------------------------							
			>;
		};

		// ---------------------------------------------------------|
		// Layer = 5 - mNAV2 - Navigation deep						|
		// ---------------------------------------------------------|		

		win_navigation2
		{		
			label = "win";

			bindings = <

				// ----------------------------------------

				&kp LS(ESC)	
				&kp LS(LC(HOME))
				&kp LS(TAB)
				&kp LS(UP)					
				&kp TAB
				&kp LC(A)

				&kp LC(F1) 
				&kp LC(F2) 
				&kp LC(PG_UP)
				&kp LC(F3) 
				&kp LALT
				&kp DEL

				// ----------------------------------------

				&sl wSShift					// -					
				&kp LS(LC(END))				
				&kp LS(LEFT)		
				&kp LS(DOWN)		
				&kp LS(RIGHT)		
				&wFuncMarkLine

				&kp LC(F4) 
				&kp LC(F5) 
				&kp LC(PG_DN)
				&kp LC(F6) 
				&kp LCTL
				&kp ENTER

				// ----------------------------------------
	
				&mdLsWin
				&kp LS(HOME)				// @Home 
				&kp LC(LS(LEFT))			// @Wort Sprung
				&kp LC(LS(RIGHT))			// @Wort Sprung
				&kp LS(END)					// @End  
				&wFuncMarkWord

				&kp LC(F7) 
				&kp LC(F8) 
				&kp LC(F9) 
				&kp LC(F10) 
				&kp LC(F11) 
				&mdRsWin

				// ----------------------------------------

				&sl wSYM
				&kp SPACE				
				&sl wFUNC
				&mo wCHAR					// 
				&wNavShift						// 
				&to wCHAR

				// ----------------------------------------
			>;
		};




		// -----------------------------------------------------|
		// Layer 6 - mPRG =	Programme							|
		// -----------------------------------------------------|


		win_programme
		{
			label = "win";

			bindings = <

				// ----------------------------------------

				&kp LG(LS(F1))
				&kp LG(LS(N1))				// 11
				&kp LG(LS(N2))				// 12
				&kp LG(LS(N3))				// 13
				&kp LG(LS(N4))				// 14
				&kp LG(LS(N5))				// 15

				&kp LG(LS(N6))				// 16
				&kp LG(LS(N7))				// 17
				&kp LG(LS(N8))				// 18
				&kp LG(LS(N9))				// 19
				&kp LG(LS(N0))				// 20
				&kp LG(LS(F2))

				// ----------------------------------------

				&kp LA(TAB)
				&kp LG(LA(LC(N1)))				// 1
				&kp LG(LA(LC(N2)))				// 2
				&kp LG(LA(LC(N3)))				// 3
				&kp LG(LA(LC(N4)))				// 4
				&kp LG(LA(LC(N5)))				// 5

				&kp LG(LA(LC(N6)))				// 6
				&kp LG(LA(LC(N7)))				// 7
				&kp LG(LA(LC(N8)))				// 8
				&kp LG(LA(LC(N9)))				// 9
				&kp LG(LA(LC(N0)))				// 0
				&kp LG(LS(F4))

				// ----------------------------------------

				&kp LG(LS(F5))
				&kp LS(LA(N1))			// 21 			
				&kp LS(LA(N2))			// 22
				&kp LS(LA(N3))			// 23
				&kp LS(LA(N4))			// 24
				&kp LS(LA(N5))			// 25
	
				&kp LS(LA(N6))			// 26
				&kp LS(LA(N7))			// 27
				&kp LS(LA(N8))			// 28
				&kp LS(LA(N9))			// 29
				&kp LS(LA(N0))			// 30
				&kp LG(LS(F6))
		
				// ----------------------------------------

				&none
				&none
				&none
				&sl wSPRG					// deep						
				&wNavShift
				&none

				// ----------------------------------------

			>;
		};
		


		// -----------------------------------------------------|
		// Layer 7 - mSPRG =	Spezial Prgramme				|
		// -----------------------------------------------------|


		win_sprogramme
		{

			label = "win";

			bindings = <

				// ----------------------------------------

				&kp LG(LS(F7))			// #OPEN
				&none
				&none
				&none
				&none
				&none

				&none
				&none
				&none
				&none
				&none
				&kp LG(LS(F8))			// #OPEN
		
				// ----------------------------------------

				&kp LG(LS(F9))			// #OPEN
				&kp LC(LG(N1))			//
				&kp LC(LG(N2))			//
				&kp LC(LG(N3))			//
				&kp LC(LG(N4))			//
				&kp LC(LG(N5))			//

				&kp LC(LG(N6))			//
				&kp LC(LG(N7))			//
				&kp LC(LG(N8))			//
				&kp LC(LG(N9))			//
				&kp LC(LG(N0))			//
				&kp LG(LS(F10))			// #OPEN

				// ----------------------------------------

				&kp LG(LS(F11))			// #OPEN			
				&none
				&none
				&none
				&none
				&none

				&none
				&none
				&none
				&none
				&none
				&kp LS(LG(F12))			// #OPEN
		
				// ----------------------------------------

				&none						//
				&none						//
				&none
				&trans						// 
				&wNavShift
				&none						// 

				// ----------------------------------------

			>;
		};
					


		// -----------------------------------------------------|
		// Layer 8 - mFUNC =	Funktionen						|
		// -----------------------------------------------------|

		win_function
		{
			label = "win";

			bindings = <

				// ----------------------------------------
	
				&kp LG(LS(F13))				
				&kp LC(LA(J))	
				&kp LC(LA(D))	
				&kp LC(LA(U))	
				&kp LC(LA(A))	
				&kp LC(LA(X))	

				&kp LC(LA(P))	
				&kp LC(LA(H))	
				&kp LC(LA(L))	
				&kp LC(LA(M))	
				&kp LC(LA(W))	
				&kp LC(W)				
				
				// ----------------------------------------

				&kp LG(LS(F14))		
				&kp LC(A)
				&kp LC(DEL)
				&kp LC(LA(I))	
				&kp LC(C)			
				&kp LC(X)

				&kp LG(V)
				&kp LC(V)
				&kp LC(LA(R))	
				&kp LC(LA(S))	
				&kp LC(LA(G))	
				&kp ENTER

				// ----------------------------------------

				&kp LS(LG(F15))
				&kp LC(S)
				&kp LC(Z)
				&kp LC(Y)
				&kp LC(O)
				&kp LC(LA(Q))	

				&kp LC(P)	
				&kp LC(LA(SEMI))	
				&kp LC(LA(LBKT))	
				&kp LC(LA(SQT))	
				&kp LC(F)	
				&kp LC(T)
				
				// ----------------------------------------

				&wModAltReset
				&sl wGUI					//
				&sl wSFUNC					// deep
				&none
				&wNavShift					//
				&none						//

				// ----------------------------------------
			>;
		};



		// -----------------------------------------------------|
		// Layer 9 - mSFUNC =	Spezial Funktionen				|
		// -----------------------------------------------------|

		win_specialfunction
		{
			label = "win";

			bindings = <

			// ----------------------------------------
	
				&kp LG(LS(F16))			
				&kp LS(LA(LC(J)))			// #OPEN
				&kp LS(LA(LC(D)))			// #OPEN
				&kp LS(LA(LC(U)))			// #OPEN
				&kp LS(LA(LC(A)))			// #OPEN
				&kp LS(LA(LC(X)))			// #OPEN

				&kp LS(LA(LC(P)))			// #OPEN
				&kp LS(LA(LC(H)))			// #OPEN
				&kp LS(LA(LC(L)))			// #OPEN
				&kp LS(LA(LC(M)))			// #OPEN
				&kp LS(LA(LC(W)))			// #OPEN
				&kp LS(LC(W))
				
				// ----------------------------------------

				&kp LG(LS(F17))		
				&kp LS(LA(LC(C)))			// #OPEN
				&kp LS(LA(LC(T)))			// #OPEN
				&kp LS(LA(LC(I)))			// #OPEN
				&kp LS(LA(LC(E)))			// #OPEN
				&kp LS(LA(LC(O)))			// #OPEN

				&kp LS(LA(LC(B)))			// #OPEN
				&kp LS(LA(LC(N)))			// #OPEN
				&kp LS(LA(LC(R)))			// #OPEN
				&kp LS(LA(LC(S)))			// #OPEN
				&kp LS(LA(LC(G)))			// #OPEN
				&kp LC(ENTER)	

				// ----------------------------------------

				&kp LG(LS(F18))		
				&kp LS(LA(LC(F)))			// #OPEN
				&kp LS(LA(LC(V)))			// #OPEN
				&kp LS(LA(LC(MINUS)))		// #OPEN
				&kp LS(LA(LC(Z)))			// #OPEN
				&kp LS(LA(LC(Q)))			// #OPEN

				&kp LS(LA(LC(Z)))			// #OPEN
				&kp LS(LA(LC(SEMI)))		// #OPEN
				&kp LS(LA(LC(LBKT)))		// #OPEN
				&kp LS(LA(LC(SQT)))			// #OPEN
				&kp LS(LA(LC(K)))			// #OPEN
				&kp LC(LS(T))
				
				// ----------------------------------------

				&wModGuiReset
				&wModSCtlReset
				&trans						// 
				&none
				&wNavShift						//
				&none						//

				// ----------------------------------------       
			>;
		};



		// -----------------------------------------------------|
		// Layer 10 - mSYM =	Symoble							|
		// -----------------------------------------------------|

		win_symbole
		{
			label = "win";

			bindings = <

				// ----------------------------------------
				
				&kp ESC
				&kp LS(LA(N7))			// backlslash
				&kp NUBS				// Spitze
				&kp LS(NUBS)			// Spitze
				&kp GRAVE				// ^
				&kp X
				
				&kp LS(NUHS)			// '
				&kp LS(DOT)				// :
				&kp LS(COMMA)			// ;
				&kp M
				&kp LS(SLASH)			// _
				&kp BACKSPACE			// Backspace

				// ----------------------------------------

				&kp LCTL
				&kp LA(L)				// @
				&kp LA(N7)				// grader strich
				&kp LS(N6)				// &
				&kp NUHS				// #
				&kp LS(N3)				// §

				&kp LS(N2)				// "
				&kp LS(N1)				// !
				&kp LS(N8)				// Runde
				&kp LS(N9)				// Runde
				&kp LS(MINUS)			// ?
				&kp ENTER

				// ----------------------------------------

				&kp LSHIFT				//
				&kp LS(N7)				// /
				&kp LS(RBKT)			// *				
				&kp LS(N5)				// %
				&kp LA(E)				// €
				&kp GRAVE				// ^

				&kp LS(N0)				// =
				&kp DOT					// .
				&kp COMMA				// ,
				&kp RBKT  				// +
				&kp SLASH 				// -
				&kp LG(DOT)   			// @Sonderzeichen
		
				// ----------------------------------------

				&sl wSSYM				// deep
				&none
				&none					// 
				&none					//
				&wNavShift					//
				&none					//

				// ----------------------------------------
			>;
		};


		// -----------------------------------------------------|
		// Layer 11 - mSSYM =	Special Symbole					|
		// -----------------------------------------------------|

		win_specialsonderzeichen
		{
			label = "win";

			bindings = <

				// ----------------------------------------

				&kp ESC
				&trans					//
				&trans 					// 
				&trans					//
				&trans					//
				&trans					//

				&trans					//
				&trans
				&trans					//
				&kp RA(M)				// 
				&trans					//
				&kp BACKSPACE			// 

				// ----------------------------------------

				&kp LGUI
				&trans					//
				&kp LS(GRAVE)			// Grad
				&trans					//
				&trans					//
				&trans					//

				&trans					//
				&trans					//
				&kp LA(N5)				// Eckige
				&kp LA(N6)				// Eckige
				&trans					//
				&kp ENTER

				// ----------------------------------------

				&kp LALT
				&kp LS(LA(N7))			// 
				&trans
				&trans
				&kp LS(N4) 				// $
				&trans					//

				&kp LA(N)				// ~
				&trans
				&kp LA(N8)				// Geschweift
				&kp LA(N9)				// Geschweift
				&kp LS(SLASH)			// _
				&kp LG(DOT)   			// @Sonderzeichen

				// ----------------------------------------

				&trans					//
				&none
				&none					// 
				&none					//
				&wNavShift				// 
				&none					//

				// ----------------------------------------
			>;
		};	




		// -----------------------------------------------------|
		// Layer 12 - mGUI =	GUI								|
		// -----------------------------------------------------|

		win_gui
		{
			label = "win";

			bindings = <

				// ----------------------------------------

				&kp LC(ESC)					// 
				&kp LC(J)					//
				&kp LC(D)					//
				&kp LC(U)					//
				&kp LC(A)					//
				&kp LC(X)					//

				&kp LC(P)					//
				&kp LC(H)					//
				&kp LC(L) 					//
				&kp LC(M)					//
				&kp LC(W) 					//
				&kp LC(BACKSPACE)			//

				// ----------------------------------------
		
				&kp LC(DEL)					//
				&kp LC(C)					//
				&kp LC(T)					//
				&kp LC(I)					//
				&kp LC(E)					//
				&kp LC(O)					//

				&kp LC(B)					//
				&kp LC(N)					//
				&kp LC(R)					//
				&kp LC(S)					//
				&kp LC(G)					//
				&kp LC(ENTER)				// 

				// ----------------------------------------

				&kp LSHIFT
				&kp LC(F)					//
				&kp LC(V)					//
				&kp LC(MINUS)				//
				&kp LC(Y)					//
				&kp LC(Q)					//

				&kp LC(Z)					//
				&kp LC(SEMICOLON)			//
				&kp LC(LEFT_BRACKET)		//
				&kp LC(SINGLE_QUOTE)		//
				&kp LC(K) 					//
				&kp LSHIFT

				// ----------------------------------------
		
				&none						//
				&trans
				&none						// 
				&none						//
				&wNavShift						//
				&none						// 

				// ----------------------------------------
			>;
		};



		// -----------------------------------------------------|
		// Layer 16 - mAlter =	Alterantive						|
		// -----------------------------------------------------|

		win_mAlter
		{
			label = "win";

			bindings = <

				// ----------------------------------------

				&none
				&kp F1
				&kp F2
				&kp F3
				&kp F4
				&kp F5

				&kp F6
				&kp F7
				&kp F8
				&kp F9
				&kp F10
				&none

				// ----------------------------------------
		
				&none
				&kp LC(N1)					// 11
				&kp LC(N2)					// 12
				&kp LC(N3)					// 13
				&kp LC(N4)					// 14
				&kp LC(N5)					// 15

				&kp LC(N6)					// 16
				&kp LC(N7)					// 17
				&kp LC(N8)					// 18
				&kp LC(N9)					// 19
				&kp LC(N0)					// 20
				&none

				// ----------------------------------------

				&none
				&kp F11
				&kp F12
				&kp F13
				&kp F14
				&kp F15

				&kp LC(LS(N6))					// 16
				&kp LC(LS(N7))					// 17
				&kp LC(LS(N8))					// 18
				&kp LC(LS(N9))					// 19
				&kp LC(LS(N0))					// 20
				&none

				// ----------------------------------------
		
				&none						//
				&trans
				&none						// 
				&none						//
				&wNavShift						//
				&none						// 

				// ----------------------------------------
			>;
		};






		// -----------------------------------------------------|
		// Layer 17 - mPNAV =	Programm NAV					|
		// -----------------------------------------------------|

		win_pnav
		{
			label = "win";

			bindings = <

				// ----------------------------------------

				&kp LC(LA(F10))				//
				&none						//
				&kp LC(LA(F1))				// 
				&kp LC(LA(UP))				// 
				&kp LC(LA(F3))				//
				&none						// 

				&none						//
				&none						// 
				&none						//
				&none						// 
				&none						// 
				&kp BACKSPACE				//

				// ----------------------------------------
		
				&none						//
				&none						//
				&kp LC(LA(LEFT))			// 
				&kp LC(LA(DOWN))			// 
				&kp LC(LA(RIGHT))			// 
				&none						// 

				&none						//
				&none						// 
				&none						//
				&none						// 
				&none						// 
				&none						//

				// ----------------------------------------

				&none						//
				&none						//
				&none						// 
				&none						//
				&none						// 
				&none						// 

				&none						//
				&none						// 
				&none						//
				&none						// 
				&none						// 
				&none						//

				// ----------------------------------------
		
				&none						//
				&none
				&none						// 
				&none						//
				&wNavShift
				&none						// 

				// ----------------------------------------
			>;
		};




		// -----------------------------------------------------|
		// Layer 19 - mSideShift =	Side Shift					|
		// -----------------------------------------------------|

		win_mSShift
		{
			label = "win";

			bindings = <

				// ----------------------------------------

				&kp ESC						// 
				&none
				&none
				&none
				&none
				&none

				&kp LC(LA(LG(P))) 					
				&kp LC(LA(LG(H)))					
				&kp LC(LA(LG(L)))			
				&kp LC(LA(LG(M)))		
				&kp LC(LA(LG(W)))	
				&kp BACKSPACE				//

				// ----------------------------------------
		
				&trans
				&none
				&none
				&none
				&to mCHAR					//
				&to wCHAR

				&kp LC(LA(LG(B))) 					
				&kp LC(LA(LG(N)))					
				&kp LC(LA(LG(R)))			
				&kp LC(LA(LG(S)))		
				&kp LC(LA(LG(G)))	
				&kp LA(ENTER)				// 

				// ----------------------------------------

				&to wCHAR
				&none
				&none
				&none
				&none
				&none

				&kp LC(LA(LG(F1)))					//
				&kp LC(LA(LG(F2)))			//
				&kp LC(LA(LG(F3)))		//
				&kp LC(LA(LG(F4)))		//
				&kp LC(LA(LG(F5))) 					//
				&to wCHAR

				// ----------------------------------------
		
				&none
				&kp LG(S)
				&wAlterShift				// 
				&wPNAVShift					//
				&wNavShift					//
				&to wNRhard

				// ----------------------------------------
			>;
		};



		
	};
};

