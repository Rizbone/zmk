

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


#define mCHAR 0
#define mNR 1

#define mLCHAR 2
#define mNRhard 3

#define mNAV 4
#define mNAV2 5

#define mPRG 6
#define mSPRG 7

#define mFUNC 8
#define mSFUNC 9

#define mSYM 10
#define mSSYM 11

#define mMOD 12
#define mSMOD 13
#define mSSMOD 14		

#define mSCHAR 15

 
/ {
    chosen {
    	zmk,matrix_transform = &default_transform;
    };
};

/ {

    behaviors {

        mdNr: tap_dance_mdNr {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_mdNr";
            #binding-cells = <0>;
            tapping-term-ms = <1000>;
            bindings = <&sl mNR>, <&sl mSYM>;
        };

        mdReset: tap_dance_mdReset {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_mdReset";
            #binding-cells = <0>;
            tapping-term-ms = <1000>;
            bindings = <&to mNRhard>, <&to 0>;
        };

		mdLs: tap_dance_mdLs {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_mdLs";
            #binding-cells = <0>;
            tapping-term-ms = <1000>;
            bindings = <&sl mSCHAR>, <&to mLCHAR>;
        };
		mdRs: tap_dance_mdRs {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_mdRs";
            #binding-cells = <0>;
            tapping-term-ms = <1000>;
            bindings = <&sl mSCHAR>, <&to mLCHAR>;
        };

    };

	
    macros {
        mSpaceReset: mSpaceReset {
            label = "mSpaceReset";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to 0>
                , <&kp SPACE>
                ;
    	};
		mEnterReset: mEnterReset {
            label = "mEnterReset";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to 0>
                , <&kp ENTER>
                ;
    	};
	};

	
	
	


	keymap
	{	
		compatible = "zmk,keymap";

		// -----------------------------------------------------|
		// Layer 0 - mChar = 	  Buchstaben					|
		// -----------------------------------------------------|
	
		mac_buchstaben
		{
			label = "MAC";

			bindings = <

				// ----------------------------------------

				&kp ESC
				&kp J 
				&kp D	 
				&kp U
				&kp A
				&kp X

				&kp P
				&kp H
				&kp L
				&kp M
				&kp W
				&kp BSPC

				// ----------------------------------------
	
				&to mCHAR
				&kp C
				&kp T
				&kp I
				&kp E
				&kp O

				&kp B
				&kp N
				&kp R
				&kp S
				&kp G
				&kp RET

				// ----------------------------------------
	
				&mdLs
				&kp F
				&kp V
				&kp MINUS
				&kp Y
				&kp Q

				&kp Z
				&kp SEMI
				&kp LBKT
				&kp SQT
				&kp K
				&mdRs

				// ----------------------------------------

				&sl mFUNC
				&kp SPACE
				&sl mNAV
				&sl mPRG
				&mdNr
				&sl mMOD

				// ----------------------------------------
			>;
		};



		// -----------------------------------------------------|
		// Layer 1 - mNR = 	  Zahlen							|
		// -----------------------------------------------------|

		mac_zahlen
		{
			label = "MAC";

			bindings = <

				// ----------------------------------------

				&kp ESC	
				&kp LS(NUHS)
				&kp NUBS
				&kp LS(NUBS)			
				&kp LS(N2)
				&kp X

				&kp LS(N4)
				&kp LA(E)
				&kp LA(M)
				&kp M
				&kp LS(N5)			
				&kp BSPC

				// ----------------------------------------

				&to mCHAR
				&kp N1				
				&kp N2				
				&kp N3				
				&kp N4					
				&kp N5		

				&kp N6				
				&kp N7				
				&kp N8				
				&kp N9				
				&kp N0				
				&mEnterReset 

				// ----------------------------------------

				&mdLs
				&kp LS(N7)
				&kp LS(N8)
				&kp LS(N9)
				&kp LS(RBRC)
				&kp LS(N0)

				&kp LS(DOT)
				&kp RBKT
				&kp COMMA
				&kp DOT
				&kp SLASH		
				&mdRs

				// ----------------------------------------
		
				&sl mFUNC
				&mSpaceReset 
				&sl mNAV
				&sl mPRG
				&none 				// Wenn ich hier Symbole im Lock umsetzen will, dann nur ueber extra layer mit Sticky
				&sl mMOD
			>;		
		};




		// -----------------------------------------------------|
		// Layer 2 - mLCHAR = 	  Buchstaben Lock				|
		// -----------------------------------------------------|
	
		mac_lchar
		{
			label = "MAC";

			bindings = <

				// ----------------------------------------

				&kp ESC
				&kp LS(J) 
				&kp LS(D)	 
				&kp LS(U)
				&kp LS(A)
				&kp LS(X)

				&kp LS(P)
				&kp LS(H)
				&kp LS(L)
				&kp LS(M)
				&kp LS(W)
				&kp LS(BSPC)

				// ----------------------------------------
	
				&to mCHAR
				&kp LS(C)
				&kp LS(T)
				&kp LS(I)
				&kp LS(E)
				&kp LS(O)
			
				&kp LS(B)
				&kp LS(N)
				&kp LS(R)
				&kp LS(S)
				&kp LS(G)
				&kp LS(RET)

				// ----------------------------------------

				&mdLs
				&kp LS(F)
				&kp LS(V)
				&kp LS(MINUS)
				&kp LS(Y)
				&kp LS(Q)

				&kp LS(Z)
				&kp LS(SEMI)
				&kp LS(LBKT)
				&kp LS(SQT)
				&kp LS(K)
				&mdRs						

				// ----------------------------------------

				&sl mFUNC
				&kp SPACE 
				&sl mNAV
				&sl mPRG
				&mdNr
				&sl mMOD

				// ----------------------------------------
			>;
		};



		// -----------------------------------------------------|
		// Layer 3 - mNRhard = 	  Zahlen Hard Lock				|
		// -----------------------------------------------------|

		mac_zahlenhard
		{
			label = "MAC";

			bindings = <

				// ----------------------------------------

				&kp ESC	
				&kp LS(NUHS)
				&kp NUBS
				&kp LS(NUBS)			
				&kp LS(N2)
				&kp X

				&kp LS(N4)
				&kp LA(E)
				&kp LA(M)
				&kp M
				&kp LS(N5)			
				&kp BSPC

				// ----------------------------------------

				&mdReset
				&kp N1				
				&kp N2				
				&kp N3				
				&kp N4					
				&kp N5		

				&kp N6				
				&kp N7				
				&kp N8				
				&kp N9				
				&kp N0				
				&kp ENTER 

				// ----------------------------------------

				&mdLs
				&kp LS(N7)
				&kp LS(N8)
				&kp LS(N9)
				&kp LS(RBRC)
				&kp LS(N0)

				&kp LS(DOT)
				&kp RBKT
				&kp COMMA
				&kp DOT
				&kp SLASH		
				&mdRs

				// ----------------------------------------
		
				&sl mFUNC
				&kp SPACE 
				&sl mNAV
				&sl mPRG
				&none 				// Wenn ich hier Symbole im Lock umsetzen will, dann nur ueber extra layer mit Sticky
				&sl mMOD
			>;		
		};




		// -----------------------------------------------------|
		// Layer = 4 - mNAV - Navigation						|
		// -----------------------------------------------------|

		mac_navigation
		{		
			label = "MAC";

			bindings = <

				// ----------------------------------------

				&kp ESC						// -
				&kp DELETE		  			// @Delete
				&kp LC(LS(TAB))				// @Tap Switch
				&kp LC(TAB)		  			// @Tab Switch 
				&kp LG(SPACE)				// @Spotlight
				&kp LG(F7)		  			// #Clipboard History

				&kp LG(UP)					// @Home Sprung
				&kp LS(TAB)					// @Tab
				&kp UP						// @Up
				&kp TAB						// @Tab
				&kp PAGE_UP					// @Page Up
				&kp BSPC					// -

				// ----------------------------------------

				&to mCHAR					// -
				&kp LG(F1)		  			// #Pfadsuche
				&kp LG(F2)		  			// #Umbennen F2
				&kp LCTRL					// -
				&kp LSHIFT					// -
				&kp LG(F8)				  	// #OPEN

				&kp LG(DOWN)				// @End Sprung
				&kp LEFT 					// @Left
				&kp DOWN					// @Down
				&kp RIGHT 					// @Right
				&kp PG_DN					// @Page Down
				&kp ENTER					// -
				
				// ----------------------------------------

				&kp LGUI					// -
				&kp LG(F3)		  			// #Seitenleiste links
				&kp LG(F4)					// #Raus
				&kp LG(F5)					// #Rein
				&kp LG(F6)		  			// #Seitenleiste rechts
				&kp LG(F9)				  	// #OPEN 

				&kp LG(TAB)					// @Prg Wechsel
				&kp LG(LEFT)				// @Home 
				&kp LA(LEFT)				// @Wort Sprung
				&kp LA(RIGHT)				// @Wort Sprung
				&kp LG(RIGHT)				// @End  
				&kp DEL						// -

				// ----------------------------------------

				&none
				&none				
				&sl mNAV2					// deep
				&trans						// for nav
				&trans						// for nav
				&trans						// for nav

				// ----------------------------------------							
			>;
		};

		// ---------------------------------------------------------|
		// Layer = 5 - mNAV2 - Navigation deep						|
		// ---------------------------------------------------------|		

		mac_navigation2
		{		
			label = "MAC";

			bindings = <

				// ----------------------------------------

				&kp LA(LG(F11))				// #OPEN
				&kp LC(LS(F1))				// @window move
				&kp LC(LS(F2))				// @window move
				&kp LC(LS(F3))				// @window move
				&kp LC(LS(F4))				// @window move
				&none						// 

				&none						//
				&kp LC(F1)					// @window snap Quater
				&kp LC(F2)					// @Window snap
				&kp LC(F3)					// @window snap Quater
				&kp LC(F4)					// @window snap fill
				&kp LA(LG(F12))				// #Rest Window

				// ----------------------------------------

				&to mCHAR					// -
				&kp LC(LS(F5))				// @window move
				&kp LC(LS(F6))				// @window move
				&kp LC(LS(F7))				// @window move
				&kp LC(LS(F8))				// @window move
				&none						//

				&none						//
				&kp LC(F5)					// @window snap 
				&kp LC(F6)					// @Window snap
				&kp LC(F7)					// @window snap 
				&kp LC(F8)					// @window snap fill
				&kp LA(LG(F13))				// #OPEN

				// ----------------------------------------
	
				&kp LA(LG(F14))				// #OPEN
				&kp LC(LS(F9))				// #OPEN
				&kp LC(LS(F10))				// #deep rein
				&kp LC(LS(F11))				// #deep raus
				&kp LC(LS(F12))				// #OPEN
				&none						//

				&none						//
				&kp LC(F9)					// @OPEN 
				&kp LC(F10)					// @OPEN
				&kp LC(F11)					// @OPEN 
				&kp LC(F12)					// @OPEN
				&kp LA(LG(F15))				// #Corner

				// ----------------------------------------

				&none
				&none
				&trans						// Real Trans
				&trans						// for nav
				&trans						// for nav
				&trans						// for nav

				// ----------------------------------------
			>;
		};




		// -----------------------------------------------------|
		// Layer 6 - mPRG =	Programme							|
		// -----------------------------------------------------|


		mac_programme
		{
			label = "MAC";

			bindings = <

				// ----------------------------------------

				&kp LG(LA(F1))				// #Hide Prg
				&kp LG(LS(N1))				// 11
				&kp LG(LS(N2))				// 12
				&kp LG(LS(N3))				// 13
				&kp LG(LS(N4))				// 14
				&kp LG(LS(N5))				// 15

				&kp LG(LS(N6))				// 16
				&kp LG(LS(N7))				// 17
				&kp LG(LS(N8))				// 18
				&kp LG(LS(N9))				// 19
				&kp LG(LS(N0))				// 20
				&kp LG(LA(F2))				// #Quit Prg

				// ----------------------------------------

				&to mCHAR					// -
				&kp LG(LA(N1))				// 1
				&kp LG(LA(N2))				// 2
				&kp LG(LA(N3))				// 3
				&kp LG(LA(N4))				// 4
				&kp LG(LA(N5))				// 5

				&kp LG(LA(N6))				// 6
				&kp LG(LA(N7))				// 7
				&kp LG(LA(N8))				// 8
				&kp LG(LA(N9))				// 9
				&kp LG(LA(N0))				// 0
				&kp LG(LA(F3))				// #Prg Wechsel

				// ----------------------------------------

				&kp LA(LG(F4))				// #Hide All Prg
				&kp LA(LS(N1))				// 21 			
				&kp LA(LS(N2))				// 22
				&kp LA(LS(N3))				// 23
				&kp LA(LS(N4))				// 24
				&kp LA(LS(N5))				// 25
	
				&kp LA(LS(N6))				// 26
				&kp LA(LS(N7))				// 27
				&kp LA(LS(N8))				// 28
				&kp LA(LS(N9))				// 29
				&kp LA(LS(N0))				// 30
				&kp LG(LA(F5))				// #Minimize Prg
		
				// ----------------------------------------

				&none
				&none
				&trans						// nav
				&sl mSPRG					// deep
				&to mNR						// Nr Lock
				&none

				// ----------------------------------------

			>;
		};


		// -----------------------------------------------------|
		// Layer 7 - mSPRG =	Spezial Prgramme				|
		// -----------------------------------------------------|


		mac_sprogramme
		{

			label = "MAC";

			bindings = <

				// ----------------------------------------

				&kp LG(LA(F6))				// #OPEN
				&kp LS(LA(F1))				//
				&kp LS(LA(F2))				//
				&kp LS(LA(F3))				//
				&kp LS(LA(F4))				//
				&kp LS(LA(F5))				//

				&kp LS(LC(F1))				//
				&kp LS(LC(F2))				//
				&kp LS(LC(F3))				//
				&kp LS(LC(F4))				//
				&kp LS(LC(F5))				//
				&kp LG(LA(F7))				// #OPEN
		
				// ----------------------------------------

				&to mCHAR
				&kp LS(LA(F6))				//
				&kp LS(LA(F7))				//
				&kp LS(LA(F8))				//
				&kp LS(LA(F9))				//
				&kp LS(LA(F10))				//

				&kp LS(LC(F6))				//
				&kp LS(LC(F7))				//
				&kp LS(LC(F8))				//
				&kp LS(LC(F9))				//
				&kp LS(LC(F10))				//
				&kp LG(LA(F8))				// #OPEN

				// ----------------------------------------

				&kp LG(LA(F9))				// #OPEN			
				&kp LS(LA(F11))				//
				&kp LS(LA(F12))				//
				&kp LS(LA(F13))				//
				&kp LS(LA(F14))				//
				&kp LS(LA(F15))				//

				&kp LS(LC(F11))				//
				&kp LS(LC(F12))				//
				&kp LS(LC(F13))				//
				&kp LS(LC(F14))				//
				&kp LS(LC(F15))				//
				&kp LG(LA(F10))				// #OPEN
		
				// ----------------------------------------

				&none						//
				&none						//
				&trans						// nav
				&trans						// origin
				&to mNRhard					// Hard Lock
				&none						//

				// ----------------------------------------

			>;
		};
					


		// -----------------------------------------------------|
		// Layer 8 - mFUNC =	Funktionen						|
		// -----------------------------------------------------|

		mac_function
		{
			label = "MAC";

			bindings = <

				// ----------------------------------------
	
				&kp LG(LS(F1))				// #OPEN
				&kp LA(F1)					// #OPEN
				&kp LA(F2)					// #OPEN
				&kp LA(F3)					// #OPEN
				&kp LA(F4)					// #OPEN
				&kp LA(F5)					// #OPEN

				&kp LC(N6)					// @Craft Format 
				&kp LC(N5)					// @Craft Format 
				&kp LC(N4)					// @Craft Format 
				&kp LC(N3)					// @Craft Format 
				&kp LG(KP_PLUS)				// @Plus 
				&kp LG(LS(F2))				// #OPEN
				
				// ----------------------------------------

				&to mCHAR					// -
				&kp LA(F6)					// @Craft Today
				&kp LA(F7)					// @Craft Tomorrow
				&kp LA(F8)					// #OPEN
				&kp LA(F9)					// #OPEN
				&kp LA(F10)					// @Craft Last Day

				&kp LG(I)					// @Craft Format
				&kp LG(B) 					// @Craft Format
				&kp LG(LS(NUHS))			// @Craft Format (Focus)
				&kp LG(LS(EQUAL))			// @Craft Format (Block)
				&kp LG(KP_MINUS)			// @Minus
				&kp LG(LS(F3))				// #OPEN

				// ----------------------------------------

				&kp LG(LS(F4))				// #OPEN
				&kp LA(F11)					// @Craft Einkauf
				&kp LA(F12)					// #OPEN
				&kp LA(F13)					// #OPEN
				&kp LA(F14)					// #OPEN
				&kp LA(F15)					// #OPEN

				&kp LG(U) 					// @Craft Format 
				&kp LG(LS(B))				// @Craft Format (Marker)
				&kp LG(LS(C))				// @Craft Format (Code)
				&kp LG(LS(SLASH))			// @Craft Format (Durch)
				&kp LG(LS(P))				// @Craft Format (Seite)
				&kp LG(LS(F5))				// #OPEN
				
				// ----------------------------------------

				&sl mSFUNC					// deep
				&none						//
				&trans						// nav
				&none						//
				&none						//
				&none						//

				// ----------------------------------------
			>;
		};


		// -----------------------------------------------------|
		// Layer 9 - mSFUNC =	Spezial Funktionen				|
		// -----------------------------------------------------|

		mac_specialfunction
		{
			label = "MAC";

			bindings = <

				// ----------------------------------------

				&kp LG(LS(F6))				// #OPEN
				&trans						//
				&bt BT_PRV					//
				&bt BT_SEL 0				//
				&bt BT_NXT					//
				&bt BT_CLR					//

				&trans						//
				&kp C_VOLUME_DOWN 			//
				&kp C_MUTE					//
				&kp C_VOLUME_UP 			//
				&kp C_VOLUME_UP 			//
				&kp LG(LS(F7))				// #OPEN

				// ----------------------------------------

				&to mCHAR					// -
				&bt BT_SEL 1				//
				&bt BT_SEL 2				//
				&bt BT_SEL 3				//
				&bt BT_SEL 4				//
				&bt BT_SEL 5				//

				&trans						//
				&kp C_PREVIOUS 				//
				&kp C_PP 					//
				&kp C_NEXT 					//
				&kp C_VOLUME_DOWN 			//
				&kp LG(LS(F8))				// #OPEN
				
				// ----------------------------------------

				&kp LG(LS(F9))				// #OPEN
				&trans						//
				&trans						//
				&trans						//
				&trans						//
				&none						//
				&bt BT_CLR					//

				&trans						//
				&kp C_VOLUME_DOWN 			//
				&kp C_MUTE					//
				&kp C_MUTE					//
				&kp C_VOLUME_UP 			//
				&kp LG(LS(F10))				// #OPEN
		
				// ----------------------------------------

				&trans						// origin
				&none						//
				&trans						// nav
				&none						//
				&none						//
				&none						//

				// ----------------------------------------       
			>;
		};



		// -----------------------------------------------------|
		// Layer 10 - mSYM =	Symoble							|
		// -----------------------------------------------------|

		mac_symbole
		{
			label = "MAC";

			bindings = <

				// ----------------------------------------
				
				&kp LG(LC(SPACE))   	// @Sonderzeichen
				&kp LS(NUHS)			// '
				&kp NUBS				// Spitze
				&kp LS(NUBS)			// Spitze
				&kp LS(N2)				// "
				&kp X					// x
				
				&kp LS(N4) 				// $
				&kp LA(E)				// €
				&kp LA(M)				// µ
				&kp M					// m
				&kp LS(N5)				// %
				&kp BACKSPACE			// -

				// ----------------------------------------

				&to mCHAR				// 
				&kp LA(L)				// @
				&kp LA(N)				// ~
				&kp GRAVE				// ^
				&kp NUHS				// #
				&kp LS(N6)				// &

				&kp LS(COMMA)			// ;
				&kp LS(N1)				// !
				&kp LS(N3)				// §
				&kp LS(SLASH)			// _
				&kp LS(MINUS)			// ?
				&kp LA(N7)				// |

				// ----------------------------------------

				&kp EQUAL				//
				&kp LS(N7)				// /
				&kp LS(N8)				// Runde
				&kp LS(N9)				// Runde
				&kp LS(RBRC)			// *
				&kp LS(N0)				// =

				&kp LS(DOT)				// :
				&kp RBKT				// +
				&kp COMMA				// ,
				&kp DOT					// .
				&kp SLASH				// -
				&kp GRAVE				// ^
		
				// ----------------------------------------

				&none 					//
				&kp SPACE				//
				&trans					// nav
				&none					//
				&sl mSSYM				// deep
				&none					//

				// ----------------------------------------
			>;
		};



		// -----------------------------------------------------|
		// Layer 11 - mSSYM =	Special Symbole					|
		// -----------------------------------------------------|

		mac_specialsonderzeichen
		{
			label = "MAC";

			bindings = <

				// ----------------------------------------

				&kp LG(LC(SPACE))   	// @Sonderzeichen
				&kp LS(NUHS)			// '
				&kp LA(N5)				// Eckige
				&kp LA(N6)				// Eckige
				&kp LS(N2)				// "
				&kp X					// x

				&kp LS(N4) 				// $
				&kp LA(E)				// €
				&kp LA(M)				// µ
				&kp M					// m
				&kp LS(N5)				// %
				&kp BACKSPACE			// 

				// ----------------------------------------

				&to mCHAR				// 
				&kp LA(L)				// @				
				&kp LA(N)				// ~
				&kp GRAVE				// ^
				&kp NUHS				// #
				&kp LS(N6)				// &

				&kp LS(COMMA)			// ;
				&kp LS(N1)				// !
				&kp LS(N3)				// §
				&kp LS(SLASH)			// _
				&kp LS(MINUS)			// ?
				&kp LA(N7)				// |

				// ----------------------------------------

				&kp LS(EQUAL)			//
				&kp LS(LA(N7))			// \
				&kp LA(N8)				// Geschweift
				&kp LA(N9)				// Geschweift
				&kp LS(RBRC)			// *
				&kp LS(N0)				// =

				&kp LS(DOT)				// :
				&kp RBKT				// +
				&kp COMMA				// ,
				&kp DOT					// .
				&kp SLASH				// -
				&kp GRAVE				// ^

				// ----------------------------------------

				&none					//
				&kp SPACE				//
				&trans					// nav
				&none					//
				&trans					// origin
				&none					//

				// ----------------------------------------
			>;
		};	




		// -----------------------------------------------------|
		// Layer 12 - mMOD =	GUI								|
		// -----------------------------------------------------|

		mac_mod
		{
			label = "MAC";

			bindings = <

				// ----------------------------------------

				&kp LA(DELETE)				// @Wort entfernen
				&kp LG(J)					//
				&kp LG(D)					//
				&kp LG(U)					//
				&kp LG(A)					//
				&kp LG(X)					//

				&kp LG(P)					//
				&kp LG(H)					//
				&kp LG(L) 					//
				&kp LG(M)					//
				&kp LG(W) 					//
				&kp LA(BACKSPACE)			// @Wort enfternen

				// ----------------------------------------
		
				&to mCHAR					//
				&kp LG(C)					//
				&kp LG(T)					//
				&kp LG(I)					//
				&kp LG(E)					//
				&kp LG(O)					//

				&kp LG(B)					//
				&kp LG(N)					//
				&kp LG(R)					//
				&kp LG(S)					//
				&kp LG(G)					//
				&kp LG(ENTER)				// @Enter Mod	

				// ----------------------------------------

				&kp LG(Y)					// @Zurueck
				&kp LG(F)					//
				&kp LG(V)					//
				&kp LG(MINUS)				//
				&kp LG(Y)					//
				&kp LG(Q)					//

				&kp LG(Z)					//
				&kp LG(SEMICOLON)			//
				&kp LG(LEFT_BRACKET)		//
				&kp LG(SINGLE_QUOTE)		//
				&kp LG(K) 					//
				&kp LS(LG(Y))				// @Wiederholen

				// ----------------------------------------
		
				&none						//
				&kp LG(SPACE)				// 
				&trans						// nav
				&none						//
				&none						//
				&sl mSMOD					// deep

				// ----------------------------------------
			>;
		};



		// -----------------------------------------------------|
		// Layer 13 - mSMOD =	Spezial GUI						|
		// -----------------------------------------------------|
		

		mac_smod
		{	
			label = "MAC";

			bindings = <

				// ----------------------------------------
			
				&kp LG(DELETE)				// @Zeile entfernen 
				&kp LG(LS(J))				//
				&kp LG(LS(D))				//
				&kp LG(LS(U))				//
				&kp LG(LS(A))				//
				&kp LG(LS(X))				//
				
				&kp LG(LS(P))				//
				&kp LG(LS(H)) 				//
				&kp LG(LS(L)) 				//
				&kp LG(LS(M))				//
				&kp LG(LS(W))				//
				&kp LG(BACKSPACE)			// @Zeile enfternen

				// ----------------------------------------
		
				&to mCHAR					// -
				&kp LG(LS(C))				//
				&kp LG(LS(T))				//
				&kp LG(LS(I))				//
				&kp LG(LS(E))				//
				&kp LG(LS(O))				//
				
				&kp LG(LS(B))				//
				&kp LG(LS(N))				//
				&kp LG(LS(R))				//
				&kp LG(LS(S))				//
				&kp LG(LS(G))				//
				&kp LG(LS(ENTER))			// @Enter Mod

				// ----------------------------------------

				&kp LG(Y)					// @Zurueck
				&kp LG(LS(F))				//
				&kp LG(LS(V))				//
				&kp LG(LS(MINUS))			//
				&kp LG(LS(Y))				//
				&kp LG(LS(Q))				//

				&kp LG(LS(Z))				//
				&kp LG(LS(SEMICOLON))		//
				&kp LG(LS(LEFT_BRACKET))	//
				&kp LG(LS(SINGLE_QUOTE))	//
				&kp LG(LS(K))				//
				&kp LS(LG(Y))				// @Wiederholen

				// ----------------------------------------

				&none						//
				&none						//
				&trans						// nav
				&none						//
				&none						//
				&trans						// origin

				// ----------------------------------------
			>;
		};

		// -----------------------------------------------------|
		// Layer 14 - mSSMOD =	Super Spezial GUI						|
		// -----------------------------------------------------|
		

		mac_ssmod
		{	
			label = "MAC";

			bindings = <

				// ----------------------------------------
			
				&kp LG(LA(ESC))				// 
				&kp LG(LA(J))				//
				&kp LG(LA(D))				//
				&kp LG(LA(U))				//
				&kp LG(LA(A))				//
				&kp LG(LA(X))				//
				
				&kp LG(LA(P))				//
				&kp LG(LA(H)) 				//
				&kp LG(LA(L)) 				//
				&kp LG(LA(M))				//
				&kp LG(LA(W))				//
				&kp LG(LA(BACKSPACE))		// 

				// ----------------------------------------
		
				&to mCHAR					// 
				&kp LG(LA(C))				//
				&kp LG(LA(T))				//
				&kp LG(LA(I))				//
				&kp LG(LA(E))				//
				&kp LG(LA(O))				//
				
				&kp LG(LA(B))				//
				&kp LG(LA(N))				//
				&kp LG(LA(R))				//
				&kp LG(LA(S))				//
				&kp LG(LA(G))				//
				&kp LA(LG(ENTER))			// Enter Mod 2

				// ----------------------------------------

				&kp LG(Y)					// @Zurueck
				&kp LG(LA(F))				//
				&kp LG(LA(V))				//
				&kp LG(LA(MINUS))			//
				&kp LG(LA(Y))				//
				&kp LG(LA(Q))				//

				&kp LG(LA(Z))				//
				&kp LG(LA(SEMICOLON))		//
				&kp LG(LA(LEFT_BRACKET))	//
				&kp LG(LA(SINGLE_QUOTE))	//
				&kp LG(LA(K))				//
				&kp LS(LA(Y))				// @Wiederholen

				// ----------------------------------------

				&none						//
				&none						//
				&trans						// nav
				&none						//
				&none						//
				&trans						// origin

				// ----------------------------------------
			>;
		};





		// -----------------------------------------------------|
		// Layer LAST - mSChar = 	  Buchstaben Shift			|
		// -----------------------------------------------------|

		mac_schar
		{
			label = "MAC";

			bindings = <

				// ----------------------------------------

				&kp LS(ESC)
				&kp LS(J) 
				&kp LS(D)	 
				&kp LS(U)
				&kp LS(A)
				&kp LS(X)

				&kp LS(P)
				&kp LS(H)
				&kp LS(L)
				&kp LS(M)
				&kp LS(W)
				&kp LS(BSPC)
	
				// ----------------------------------------

				&to mCHAR
				&kp LS(C)
				&kp LS(T)
				&kp LS(I)
				&kp LS(E)
				&kp LS(O)

				&kp LS(B)
				&kp LS(N)
				&kp LS(R)
				&kp LS(S)
				&kp LS(G)
				&kp LS(RET)
	
				// ----------------------------------------

				&mdLs
				&kp LS(F)
				&kp LS(V)
				&kp LS(MINUS)
				&kp LS(Y)
				&kp LS(Q)

				&kp LS(Z)
				&kp LS(SEMI)
				&kp LS(LBKT)
				&kp LS(SQT)
				&kp LS(K)
				&mdRs		

				// ----------------------------------------		

				&none						//
				&kp LS(SPACE)				//
				&trans						// nav
				&none						//
				&mdNr						// nr
				&none						//

				// ----------------------------------------

			>;		
		};

	};
};

